---
jobs:
- name: bootstrap
  on_success:
    do:
    - task: success-message
      input_mapping: {job-info-in: bootstrap-job-info}
      output_mapping: {job-info-out: bootstrap-job-info}
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: alpine}
        inputs:
        - name: job-info-in
        outputs:
        - name: job-info-out
        run:
          path: /bin/sh
          args:
          - -c
          - |
            cp job-info-in/* job-info-out
            cat <<EOF > job-info-out/job_message
            <hr/>
            <p><large>Inceptor bootstrap testing @ $(date +"%A %Y-%m-%d %H:%M:%S")...</large></p>
            <hr/>
            EOF
            
    - task: notify on bootstrap success

  on_failure:
    do:
    - task: notify on bootstrap failure
  plan:
  - get: automation
  - task: initialize
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: alpine}
      run:
        path: /bin/sh
        args:
        - -c
        - |
          set -e
          
          wget https://dl.minio.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc
          chmod +x /usr/local/bin/mc

          # Create a bucket for greeting messages
          mc config host add auto $AUTOS3_URL $AUTOS3_ACCESS_KEY $AUTOS3_SECRET_KEY
          [[ "$(mc ls auto/ | awk '/greeting\/$/{ print $5 }')" == "greeting/" ]] || \
            mc mb auto/greeting
          
          # Create folders to hold greeting messages
          touch .greeting
          mc cp .greeting auto/greeting/hello/.greeting
          mc cp .greeting auto/greeting/goodbye/.greeting

          # Create a file that can be used to trigger 
          # other jobs. This file will be versioned by 
          # a sequential number in its name.
          echo -e "Hello  $ENVIRONMENT\n$(date +'%a %b %d %Y - %R %Z')" > hello-0
          mc cp hello-0 auto/greeting/hello/hello-0
      params:
        ENVIRONMENT: ((environment))
        AUTOS3_URL: ((autos3_url))
        AUTOS3_ACCESS_KEY: ((autos3_access_key))
        AUTOS3_SECRET_KEY: ((autos3_secret_key))

- name: check-hello
  plan:
  - get: schedule
    trigger: true
  - get: hello-message

- name: hello
  plan:
  - in_parallel:
    - get: hello-message
      passed: [check-hello]
      trigger: true
  - task: say-hello
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: alpine}
      inputs:
      - name: hello-message
        path: message
      run:
        path: /bin/sh
        args:
        - -c
        - |
          on_exit() {
            rv=$?
            [[ $rv -ne 0 ]] && cat out.log
            exit $rv
          }
          trap "on_exit" INT TERM EXIT

          set -e

          wget https://dl.minio.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc >>out.log 2>&1
          chmod +x /usr/local/bin/mc >>out.log 2>&1
          apk add figlet --update-cache >>out.log 2>&1

          version=$(cat message/version)
          figlet -cw 160 "$(cat message/hello-$version)"
          
          echo -e "Goodbye  $ENVIRONMENT\n$(date +'%a %b %d %Y - %R %Z')" > goodbye-$version

          mc config host add auto $AUTOS3_URL $AUTOS3_ACCESS_KEY $AUTOS3_SECRET_KEY >>out.log 2>&1
          mc find auto/greeting/goodbye --name "goodbye-*" --exec "mc rm {}" >>out.log 2>&1
          mc cp goodbye-$version auto/greeting/goodbye/goodbye-$version >>out.log 2>&1
      params:
        ENVIRONMENT: ((environment))
        AUTOS3_URL: ((autos3_url))
        AUTOS3_ACCESS_KEY: ((autos3_access_key))
        AUTOS3_SECRET_KEY: ((autos3_secret_key))

- name: check-goodbye
  plan:
  - get: schedule
    trigger: true
  - get: goodbye-message

- name: Goodbye
  plan:
  - in_parallel:
    - get: goodbye-message
      passed: [check-goodbye]
      trigger: true
  - task: say-goodbye
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: alpine}
      inputs:
      - name: goodbye-message
        path: message
      run:
        path: /bin/sh
        args:
        - -c
        - |
          on_exit() {
            rv=$?
            [[ $rv -ne 0 ]] && cat out.log
            exit $rv
          }
          trap "on_exit" INT TERM EXIT

          set -e

          wget https://dl.minio.io/client/mc/release/linux-amd64/mc -O /usr/local/bin/mc >>out.log 2>&1
          chmod +x /usr/local/bin/mc >>out.log 2>&1
          apk add figlet --update-cache >>out.log 2>&1

          version=$(cat message/version)
          figlet -cw 160 "$(cat message/goodbye-$version)"

          version=$(($version+1))
          echo -e "Hello  $ENVIRONMENT\n$(date +'%a %b %d %Y - %R %Z')" > hello-$version

          mc config host add auto $AUTOS3_URL $AUTOS3_ACCESS_KEY $AUTOS3_SECRET_KEY >>out.log 2>&1
          mc find auto/greeting/hello --name "hello-*" --exec "mc rm {}" >>out.log 2>&1
          mc cp hello-$version auto/greeting/hello/hello-$version >>out.log 2>&1
      params: 
        ENVIRONMENT: ((environment))
        AUTOS3_URL: ((autos3_url))
        AUTOS3_ACCESS_KEY: ((autos3_access_key))
        AUTOS3_SECRET_KEY: ((autos3_secret_key))

- name: failing-job
  on_failure:
    do:
    - task: failure-message
      input_mapping: {job-info-in: failing-job-job-info}
      output_mapping: {job-info-out: failing-job-job-info}
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: alpine}
        inputs:
        - name: job-info-in
        outputs:
        - name: job-info-out
        run:
          path: /bin/sh
          args:
          - -c
          - |
            cp job-info-in/* job-info-out
            cat <<EOF > job-info-out/job_message
            <hr/>
            <p><large>Inceptor failure testing @ $(date +"%A %Y-%m-%d %H:%M:%S")...</large></p>
            <hr/>
            EOF
            
    - task: notify on failing-job failure
    
  plan:
  - get: automation
  - task: fail
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: alpine}
      run:
        path: /bin/sh
        args:
        - -c
        - |
          set -e
          
          apk add figlet --update-cache >>out.log 2>&1
          figlet -cw 160 "FAIL!"

          exit 1

resources:

- name: automation
  type: git
  source:
    uri: ((automation_repo_url))
    branch: master
    private_key: ((automation_repo_key))

- name: hello-message
  type: s3
  source:
    bucket: greeting
    endpoint: ((autos3_url))
    access_key_id: ((autos3_access_key))
    secret_access_key: ((autos3_secret_key))
    regexp: hello/hello-(.*)

- name: goodbye-message
  type: s3
  source:
    bucket: greeting
    endpoint: ((autos3_url))
    access_key_id: ((autos3_access_key))
    secret_access_key: ((autos3_secret_key))
    regexp: goodbye/goodbye-(.*)

- name: schedule
  type: time
  source:
    interval: 1m
    location: ((locale))
    start: 12:00 AM
    stop: 11:59 PM
