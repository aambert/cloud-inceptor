#!/bin/bash
SCRIPT_HOME=$(cd $(dirname "$(ls -l $0 | awk '{ print $NF }')") && pwd)
source $SCRIPT_HOME/common

if [[ -z $config_concourse_port ]]; then
  echo "Skipping Concourse setup as no Concourse configuration found."
  exit 0
fi

CONCOURSE_HOME=/data/concourse

userdel automation > /dev/null 2>&1
useradd automation -p $(openssl rand -base64 32) -m -d /data/users/home/automation -s /bin/bash

userdel concourse >/dev/null 2>&1
useradd concourse -p $(openssl rand -base64 32) -d /opt/concourse -G docker

prune_worker=$(sudo -i -- /bin/sh -c 'if [ -e /data/concourse/database/base ]; then echo yes; fi')

rm -fr $CONCOURSE_HOME/keys

mkdir -p \
  $CONCOURSE_HOME/docker \
  $CONCOURSE_HOME/objectstore/notifications \
  $CONCOURSE_HOME/database \
  $CONCOURSE_HOME/keys/web \
  $CONCOURSE_HOME/keys/worker

touch $CONCOURSE_HOME/objectstore/notifications/.keep
autos3_access_key=$(head /dev/urandom | tr -dc 'A-Za-z0-9' | head -c 20 ; echo '')
autos3_secret_key=$(head /dev/urandom | tr -dc 'A-Za-z0-9' | head -c 20 ; echo '')

cat << ---EOF > $CONCOURSE_HOME/docker/docker-compose.yml
---
version: '3'

services:

  #
  # Concourse services
  #

  concourse-db:
    image: postgres
    volumes: ["$CONCOURSE_HOME/database:/database"]
    restart: unless-stopped
    environment:
    - POSTGRES_DB=concourse
    - POSTGRES_PASSWORD=concourse_pass
    - POSTGRES_USER=concourse_user
    - PGDATA=/database

  concourse-web:
    image: concourse/concourse
    depends_on: [concourse-db]
    links: [concourse-db]
    command: web
    ports: ["$config_concourse_port:8080"]
    volumes: ["$CONCOURSE_HOME/keys/web:/concourse-keys"]
    restart: unless-stopped
    environment:
    - CONCOURSE_POSTGRES_HOST=concourse-db
    - CONCOURSE_POSTGRES_USER=concourse_user
    - CONCOURSE_POSTGRES_PASSWORD=concourse_pass
    - CONCOURSE_POSTGRES_DATABASE=concourse
    - CONCOURSE_EXTERNAL_URL=\${CONCOURSE_EXTERNAL_URL}
    - CONCOURSE_ADD_LOCAL_USER=admin:$(htpasswd -bnBC 10 "" "$config_concourse_password" | tr -d ':\n' | sed 's/$2y/$2a/' | sed 's|\$|\$\$|g')
    - CONCOURSE_MAIN_TEAM_ALLOW_ALL_USERS=true

  concourse-worker:
    image: concourse/concourse
    privileged: true
    links: [concourse-web,minio]
    depends_on: [concourse-web]
    command: worker
    volumes: ["$CONCOURSE_HOME/keys/worker:/concourse-keys"]
    restart: unless-stopped
    environment:
    - CONCOURSE_TSA_HOST=concourse-web:2222
    - CONCOURSE_GARDEN_NETWORK

  #
  # Minio provides an S3 storage back-end for automation jobs
  # to be able to persist temporary data between jobs in a 
  # pipeline via the concourse s3 resource type.
  #

  minio:
    image: minio/minio
    command: server /data
    volumes: ["$CONCOURSE_HOME/objectstore:/data"]
    restart: unless-stopped
    environment:
      MINIO_ACCESS_KEY: $autos3_access_key
      MINIO_SECRET_KEY: $autos3_secret_key
---EOF

ssh-keygen -t rsa -f $CONCOURSE_HOME/keys/web/tsa_host_key -N ''
ssh-keygen -t rsa -f $CONCOURSE_HOME/keys/web/session_signing_key -N ''

ssh-keygen -t rsa -f $CONCOURSE_HOME/keys/worker/worker_key -N ''

cp $CONCOURSE_HOME/keys/worker/worker_key.pub $CONCOURSE_HOME/keys/web/authorized_worker_keys
cp $CONCOURSE_HOME/keys/web/tsa_host_key.pub $CONCOURSE_HOME/keys/worker

chown -R concourse:docker $CONCOURSE_HOME

if [[ $(echo "$config_concourse_port" | sed -e 's|^[0-9]*|xx|') == xx ]]; then
  CONCOURSE_URL=http://127.0.0.1:$config_concourse_port
else
  CONCOURSE_URL=http://$config_concourse_port
fi

sudo -S -u concourse /bin/sh -l <<EOF
cd $CONCOURSE_HOME/docker
export CONCOURSE_EXTERNAL_URL=$CONCOURSE_URL
docker-compose down --rmi all
docker-compose up -d --force-recreate
EOF

i=0
curl -f -L "$CONCOURSE_URL/api/v1/cli?arch=amd64&platform=linux" \
  -o /usr/local/bin/fly >/dev/null 2>&1
while [[ $? -ne 0 && $i -lt 12 ]]; do
  
  i=$(($i+1))
  echo "Waiting for Concourse to startup..."
  sleep 5

  curl -f -L "$CONCOURSE_URL/api/v1/cli?arch=amd64&platform=linux" \
    -o /usr/local/bin/fly >/dev/null 2>&1
done
if [[ $? -ne 0 ]]; then 
  echo "ERROR! Concourse is still not running after 60 seconds."
  exit 1
fi

chmod +x /usr/local/bin/fly

echo -e "\nvpc_name: '$config_concourse_vpc_name'" >> /root/bootstrap-vars.yml
echo -e "pipeline_automation_path: $config_concourse_pipeline_automation_path" >> /root/bootstrap-vars.yml
echo -e "notification_email: '$config_concourse_notification_email'" >> /root/bootstrap-vars.yml

echo -e "\nconcourse_url: 'http://concourse-web:8080'" >> /root/bootstrap-vars.yml
echo -e "concourse_user: 'admin'" >> /root/bootstrap-vars.yml
echo -e "concourse_password: '$config_concourse_password'" >> /root/bootstrap-vars.yml

echo -e "\nautos3_url: 'http://minio:9000'" >> /root/bootstrap-vars.yml
echo -e "autos3_access_key: '$autos3_access_key'" >> /root/bootstrap-vars.yml
echo -e "autos3_secret_key: '$autos3_secret_key'" >> /root/bootstrap-vars.yml

if [[ -e /root/.powerdns_installed ]]; then
  echo -e "\npowerdns_host: '$config_powerdns_ns_ip'" >> /root/bootstrap-vars.yml
  echo -e "powerdns_port: '8888'" >> /root/bootstrap-vars.yml
  echo -e "powerdns_api_key: '$config_powerdns_api_key'" >> /root/bootstrap-vars.yml
fi

if [[ -e /root/.smtp_installed ]]; then
  echo -e "\nautomation_email: 'automation@$config_server_fqdn'" >> /root/bootstrap-vars.yml
  echo -e "smtp_host: '$config_smtp_internal_smtp_host'" >> /root/bootstrap-vars.yml
  echo -e "smtp_port: '$config_smtp_internal_smtp_port'" >> /root/bootstrap-vars.yml
fi

sudo -i -- fly --target local login --insecure \
  --concourse-url $CONCOURSE_URL \
  --username=admin \
  --password=$config_concourse_password \
  --team-name=main

set -eo pipefail

s=$(head -1 /root/bootstrap.yml)
if [[ $s == "---" ]]; then

  sudo -i -- <<BOOTSTRAP
  set -ex

  if [[ -n '$config_concourse_notification_email' ]]; then
      /root/.bin/patch_job_notifications.sh /root/bootstrap.yml bootstrap > bootstrap-1.yml
      bosh interpolate -l /root/bootstrap-vars.yml -o /root/.bin/notifications_job_patch.yml bootstrap-1.yml > /root/bootstrap-2.yml

      fly --target local set-pipeline -n -p bootstrap \
        -c /root/bootstrap-2.yml -l /root/bootstrap-vars.yml
  else
      fly --target local set-pipeline -n -p bootstrap \
        -c /root/bootstrap.yml -l /root/bootstrap-vars.yml
  fi

  fly --target local unpause-pipeline -p bootstrap
BOOTSTRAP

fi

if [[ $prune_worker == "yes" ]]; then

  i=0
  while [[ -z $stalled && $i -lt 12 ]]; do

      echo "watching for stalled workers to prune..."
      i=$(($i+1))
      sleep 5
      
      stalled=$(sudo -i -- fly --target local workers | awk '/stalled/{ print $1 }')
      for s in $stalled; do
        echo "pruning stalled worker: $s"
        sudo -i -- fly --target local prune-worker -w $s
      done
  done

  # Prune any unused docker volumes that
  # were attached to pruned workers
  docker volume prune
fi

touch /root/.concourse_installed
