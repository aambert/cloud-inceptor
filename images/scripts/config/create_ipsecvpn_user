#!/bin/bash

set -e

if [[ `whoami` != "root" ]]; then 
  echo -e "\nThis script needs to be run as root.\n"
  exit 1
fi

if [[ -z "$1" || -z "$2" ]]; then
  echo -e "\nUsage: create_vpn_user user password\n"
  exit 1
fi

user=$1
password=$2
user_home=/data/users/home/$user

if [[ -e ${user_home}/${user}.p12 ]]; then
  echo "User '${user}' is already configured."
  exit 0
fi

set +e
id $user >/dev/null 2>&1
if [[ $? -ne 0 ]]; then
  password_hash=$(mkpasswd "$password")
  useradd $user -p $password_hash -m -d $user_home -s /bin/bash
else
  set -e
fi

if [[ -n $3 ]]; then
  echo "$3" > $user_home/.ssh/authorized_keys

  grep -q "^AllowUsers $user" /etc/ssh/sshd_config \
    || echo -e "AllowUsers $user" >> /etc/ssh/sshd_config
fi

service sshd restart

if [[ -e /etc/apache2 ]]; then

  APACHE_USER_CONFIG=/data/users/etc/apache2
  mkdir -p $APACHE_USER_CONFIG
  cat << ---EOF > $APACHE_USER_CONFIG/$user.conf
<Directory $user_home>
  AuthType Basic
    AuthName "Restricted Area"
    AuthBasicProvider external
    AuthExternal pwauth
    Require user $user
    Options +Indexes
</Directory>
---EOF

  systemctl restart apache2
fi

#
# Create user's VPN credentials 
# and client configuration files
#

IPSECVPN_DATA_HOME=/data/ipsecvpn
IPSECVPN_CONFIG=$IPSECVPN_DATA_HOME/etc

source $IPSECVPN_CONFIG/serverinfo

cacert_data=$(cat /etc/ssl/certs/bastion_ca.pem | base64 -w 0)
cacert_cn=$(openssl x509 -in /etc/ssl/certs/bastion_ca.pem -text | awk -F' = ' '/Subject: /{ print $7 }')

# Create user's authentication certificate
user_key_der_path=/etc/ipsec.d/private/${user}.der
user_key_pem_path=/etc/ipsec.d/private/${user}.pem
user_cert_der_path=/etc/ipsec.d/certs/${user}.der
user_cert_pem_path=/etc/ipsec.d/certs/${user}.pem

ipsec pki --gen --type rsa --size 4096 --outform der > $user_key_der_path
openssl rsa -inform DER -in $user_key_der_path -outform PEM -out $user_key_pem_path
chmod 0600 $user_key_der_path $user_key_pem_path

ipsec pki --pub --in $user_key_der_path --type rsa \
  | ipsec pki --issue \
    --lifetime 3650 \
    --cacert /etc/ssl/certs/bastion_ca.pem \
    --cakey /etc/ssl/certs/bastion_ca_key.pem \
    --dn "C=${vpn_server_cert_country}, O=${vpn_server_cert_org}, CN=${user}" --san "$user" --outform der \
    > $user_cert_der_path
openssl x509 -inform DER -in $user_cert_der_path -outform PEM -out $user_cert_pem_path

openssl pkcs12 -export \
  -inkey $user_key_pem_path \
  -in $user_cert_pem_path \
  -name "${user}'s VPN Certificate" \
  -caname "$cacert_cn" \
  -certfile /etc/ssl/certs/bastion_ca.pem \
  -passout pass:"$password" \
  -out ${user_home}/${user}.p12
user_cert_data=$(cat ${user_home}/${user}.p12 | base64 -w 0)

payload_uuid=$(uuidgen)
vpn_payload_uuid=$(uuidgen)
vpn_cert_payload_uuid=$(uuidgen)
vpn_ca_payload_uuid=$(uuidgen)

# Create mobileconfig file for ios and osx
cat << ---EOF > ${user_home}/${vpn_server_description}.mobileconfig
<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE plist PUBLIC '-//Apple//DTD PLIST 1.0//EN' 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'>
<plist version='1.0'>
<dict>
  <key>PayloadDisplayName</key><string>IKEv2 VPN - ${vpn_server_description}</string>
  <key>PayloadIdentifier</key><string>com.mackerron.vpn.${payload_uuid}</string>
  <key>PayloadUUID</key><string>${payload_uuid}</string>
  <key>PayloadType</key><string>Configuration</string>
  <key>PayloadVersion</key><integer>1</integer>
  <key>PayloadRemovalDisallowed</key><false/>  
  <key>PayloadContent</key>
  <array>

    <!-- VPN Configuration -->
    <dict>
      <key>PayloadDisplayName</key><string>VPN Configuration (${vpn_server})</string>
      <key>PayloadDescription</key><string>Configures VPN settings</string>
      <key>PayloadIdentifier</key><string>com.apple.vpn.managed.${vpn_payload_uuid}</string>
      <key>PayloadUUID</key><string>${vpn_payload_uuid}</string>
      <key>PayloadType</key><string>com.apple.vpn.managed</string>
      <key>PayloadVersion</key><integer>1</integer>
      <key>UserDefinedName</key><string>${vpn_server}</string>
      <key>VPNType</key><string>IKEv2</string>

      <key>IKEv2</key>
      <dict>
        <key>RemoteAddress</key><string>${vpn_server}</string>
        <key>RemoteIdentifier</key><string>${vpn_server}</string>
				<key>ServerCertificateCommonName</key><string>${vpn_server}</string>
				<key>ServerCertificateIssuerCommonName</key><string>${cacert_cn}</string>        

        <!-- Identifier must match CN of user's certificate for certificate based user authentication -->
        <key>LocalIdentifier</key><string>${user}</string>
        
        <!-- Password based user authentication (eap-mschapv2) -->
        <!--
        <key>AuthName</key><string>${user}</string>
        <key>AuthPassword</key><string>${password}</string>
        -->

        <!-- Certificate based user authentication (eap-tls) -->
        <key>AuthenticationMethod</key><string>Certificate</string>
        <key>PayloadCertificateUUID</key><string>${vpn_cert_payload_uuid}</string>
        <key>ExtendedAuthEnabled</key><true/>

        <key>DeadPeerDetectionRate</key><string>Medium</string>
        <key>UseConfigurationAttributeInternalIPSubnet</key><integer>0</integer>
        <key>DisableMOBIKE</key><integer>0</integer>
        <key>DisableRedirect</key><integer>0</integer>
        <key>EnablePFS</key><integer>1</integer>
        <key>EnableCertificateRevocationCheck</key><integer>0</integer>
        
        <key>OnDemandEnabled</key><integer>0</integer>
        <key>OnDemandRules</key>
        <array>
          <dict>
            <key>Action</key>
            <string>Connect</string>
          </dict>
        </array>

        <key>IKESecurityAssociationParameters</key>
        <dict>
          <key>EncryptionAlgorithm</key><string>AES-256-GCM</string>
          <key>IntegrityAlgorithm</key><string>SHA2-384</string>
          <key>DiffieHellmanGroup</key><integer>21</integer>
          <key>LifeTimeInMinutes</key><integer>1440</integer>
        </dict>
        <key>ChildSecurityAssociationParameters</key>
        <dict>
          <key>EncryptionAlgorithm</key><string>AES-256-GCM</string>
          <key>IntegrityAlgorithm</key><string>SHA2-384</string>
          <key>DiffieHellmanGroup</key><integer>21</integer>
          <key>LifeTimeInMinutes</key><integer>1440</integer>
        </dict>
      </dict>

      <key>IPv4</key>
      <dict>
        <key>OverridePrimary</key>
        <integer>1</integer>
      </dict>

      <key>Proxies</key>
      <dict>
        <key>HTTPEnable</key>
        <integer>0</integer>
        <key>HTTPSEnable</key>
        <integer>0</integer>
      </dict>
    </dict>

    <!-- User Authentication Certificate -->
    <dict>
      <key>PayloadDisplayName</key><string>User Certificate</string>
      <key>PayloadDescription</key><string>Adds a PKCS#12-formatted certificate</string>
      <key>PayloadIdentifier</key><string>com.apple.security.pkcs12.${vpn_cert_payload_uuid}</string>
      <key>PayloadUUID</key><string>${vpn_cert_payload_uuid}</string>
      <key>PayloadType</key><string>com.apple.security.pkcs12</string>
      <key>PayloadVersion</key><integer>1</integer>
      <key>PayloadCertificateFileName</key><string>${user}.p12</string>
      <key>Password</key><string>${password}</string>
      <key>PayloadContent</key><data>${user_cert_data}</data>
    </dict>

    <!-- Root Certificate -->
    <dict>
      <key>PayloadDisplayName</key><string>Root CA</string>
      <key>PayloadDescription</key><string>Adds a CA root certificate</string>
      <key>PayloadIdentifier</key><string>com.apple.security.root.${vpn_ca_payload_uuid}</string>
      <key>PayloadUUID</key><string>${vpn_ca_payload_uuid}</string>
      <key>PayloadType</key><string>com.apple.security.root</string>
      <key>PayloadVersion</key><integer>1</integer>
      <key>PayloadCertificateFileName</key><string>bastion_ca.cer</string>
      <key>PayloadContent</key><data>${cacert_data}</data>
    </dict>

  </array>
</dict>
</plist>
---EOF

# Ensure all files under user home have correct ownership
chown -R ${user}:${user} ${user_home}

# Backup all system user files
cp /etc/passwd /data/users/etc
cp /etc/shadow /data/users/etc
cp /etc/group /data/users/etc
cp /etc/gshadow /data/users/etc
cp /etc/ssh/sshd_config /data/users/etc/ssh

set +e