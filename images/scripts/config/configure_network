#!/bin/bash

set -exo pipefail

SCRIPT_HOME=$(cd $(dirname "$(ls -l $0 | awk '{ print $NF }')") && pwd)
source $SCRIPT_HOME/common

[[ ! -e /root/.network_installed ]] || exit 0

if [[ -z $config_server_dmz_itf_ip ]]; then
  exit 0
fi

#
# Setup hostname to map to domain
#
if [[ -n $config_server_fqdn ]]; then
  echo "$config_server_fqdn" > /etc/hostname
  hostname $config_server_fqdn

  sed -i \
    "s|^127.0.1.1.*$|127.0.1.1\t${config_server_fqdn}  ${config_server_fqdn%%.*}|" \
    /etc/hosts

  sed -i \
    "s|^$config_server_dmz_itf_ip.*$|$config_server_dmz_itf_ip  ${config_server_fqdn}  ${config_server_fqdn%%.*}|" \
    /etc/hosts
fi

#
# Configure NICS
#

set +x
echo -e "\n============================= Network Interfaces =============================="
ip a
echo -e "=================================== Routes ===================================="
route -n
echo -e "===============================================================================\n"
set -x

ip_a=$(ip a)
itfs=( $(echo "$ip_a" | awk '/^[0-9]+: (eth|ens?)[0-9]+:/{ print substr($2,1,length($2)-1) }') )

public_itf=$(echo "$ip_a" \
  | grep -B 5 "$config_server_dmz_itf_ip" \
  | awk '/^[0-9]+: (eth|ens?)[0-9]+:/{ print substr($2,1,length($2)-1) }')

if [[ -n $config_powerdns_ns_ip ]]; then
  nameservers=$config_powerdns_ns_ip
else
  nameservers=$config_server_dns_resolvers
fi

# Disable cloud-init network configuration
rm -f /etc/netplan/*.yaml
rm -f /etc/netplan/*.yml
cat << ---EOF > /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
network: {config: disabled}
---EOF

cat << ---EOF > /etc/netplan/50-inceptor-network-config.yaml
network:
  version: 2
  ethernets:
---EOF

lans=()
dhcpd_interfaces=""

i=0
j=51

for n in $(echo $config_server_lan_interfaces | sed "s/,/ /g"); do

  itf=${itfs[$i]}
  i=$(($i+1))

  # If more lan interfaces are configured 
  # then available then skip them
  [[ -n $itf ]] || continue
  
  ip=$(echo $n | awk -F'|' '{print $1}')
  subnet=$(echo $n | awk -F'|' '{print $2}')
  static_route_subnet=$(echo $n | awk -F'|' '{print $3}')
  gateway=$(echo $n | awk -F'|' '{print $4}')
  dhcp_lease_start=$(echo $n | awk -F'|' '{print $5}')
  dhcp_lease_end=$(echo $n | awk -F'|' '{print $6}')

  netinfo=$(ipcalc $subnet)
  subnet_ip=$(echo -e "$netinfo" | awk '/Address/{ print $2 }')
  subnet_bits=$(echo -e "$netinfo" | awk '/Netmask/{ print $4 }')
  netmask=$(echo -e "$netinfo" | awk '/Netmask/{ print $2 }')
  broadcast=$(echo -e "$netinfo" | awk '/Broadcast/{ print $2 }')

  mac_addr=$(echo "$ip_a" | grep -A 2 "^[0-9]*: $itf" | awk '/link\/ether/{ print $2 }')

  if [[ -z "$static_route_subnet" \
    || "$static_route_subnet" == "0.0.0.0/0" ]]; then

    lan_itf="$subnet|$itf"
  else
    netmask=$(ipcalc $static_route_subnet | awk '/Netmask/{ print $2 }')
    lan_itf="$static_route_subnet|$itf"
  fi
  lans+=($lan_itf)

  set +e
  ifdown $itf
  ip address flush dev $itf
  ps -ef | awk '!/awk/&&/dhclient.'$itf'/{ print $2 }' | xargs kill -9

  if [[ -n $ip ]]; then

    # Static routes can be configured on the interface
    # only if a static IP has been configured for it.
    if [[ -n $gateway ]]; then

      if [[ -n $static_route_subnet ]]; then
        # Configure a static IP with a static route
        cat << ---EOF >> /etc/netplan/50-inceptor-network-config.yaml
    $itf:
      addresses:
      - $ip/32
      routes:
      - to: $static_route_subnet
        via: $gateway
        metric: 100
        on-link: true
      nameservers:
        addresses: [$nameservers]
---EOF

      else
        # Configure a static IP with gateway
        cat << ---EOF >> /etc/netplan/50-inceptor-network-config.yaml
    $itf:
      addresses:
      - $ip/$subnet_bits
      gateway4: $gateway
      nameservers:
        addresses: [$nameservers]
---EOF
      fi

    else
      # Configure a static IP 
      cat << ---EOF >> /etc/netplan/50-inceptor-network-config.yaml
    $itf:
      addresses:
      - $ip/$subnet_bits
      nameservers:
        addresses: [$nameservers]
---EOF
    fi

  else
    # Configure DHCP
    cat << ---EOF >> /etc/netplan/50-inceptor-network-config.yaml
    $itf:
      dhcp4: true
      dhcp4-overrides:
        route-metric: 100
---EOF
  fi

  if [[ -n $mac_addr ]]; then
    # Lock interface to mac address
    cat << ---EOF >> /etc/netplan/50-inceptor-network-config.yaml
      match:
        macaddress: $mac_addr
      set-name: $itf
---EOF
  fi

  set -e
  j=$(($j+1))

  # Configure DHCP daemon's leases on subnet
  if [[ -n $dhcp_lease_start ]]; then

    dhcpd_interfaces="$dhcpd_interfaces $itf"

    cat << ---EOF >> /etc/dhcp/dhcpd.conf

subnet $subnet_ip netmask $netmask {

  option routers              $ip;
  option subnet-mask          $netmask;
  option broadcast-address    $broadcast;
  option domain-name-servers  $config_server_dns_resolvers;
  option ntp-servers          $ip;
  default-lease-time          86400;
  max-lease-time              86400;

  range $dhcp_lease_start $dhcp_lease_end;
}
---EOF
  fi
done

# Apply new network settings
netplan apply

if [[ -z $public_itf ]]; then

  # NAT interface should be configured by now and 
  # it should have beeen assigned the server's 
  # private IP from the provided configuration
  public_itf=$(ip a \
    | grep -B 5 "$config_server_dmz_itf_ip" \
    | awk '/^[0-9]+: (eth|ens?)[0-9]+:/{ print substr($2,1,length($2)-1) }')

  [[ -n $public_itf ]] || (
    echo "ERROR! unable to determine interface mapped to server's IP $public_itf.";
    exit 1;
  )
fi

# Enable IP forwarding and disble IPv6
replace_or_append_key "net.ipv4.ip_forward" "1" /etc/sysctl.conf
replace_or_append_key "net.ipv4.ip_no_pmtu_disc" "1" /etc/sysctl.conf
replace_or_append_key "net.ipv4.conf.all.rp_filter" "1" /etc/sysctl.conf
replace_or_append_key "net.ipv4.conf.all.accept_redirects" "0" /etc/sysctl.conf
replace_or_append_key "net.ipv4.conf.all.send_redirects" "0" /etc/sysctl.conf
replace_or_append_key "net.ipv6.conf.all.disable_ipv6" "1" /etc/sysctl.conf
replace_or_append_key "net.ipv6.conf.default.disable_ipv6" "1" /etc/sysctl.conf
replace_or_append_key "net.ipv6.conf.lo.disable_ipv6" "1" /etc/sysctl.conf

sysctl -p

if [[ -e /data/network/etc/iptables-dump.ipt ]]; then
  # Restore persisted configured rules
  iptables-restore < /data/network/etc/iptables-dump.ipt
else
  iptables -P INPUT   ACCEPT
  iptables -P FORWARD ACCEPT
  iptables -P OUTPUT  ACCEPT

  iptables -F
  iptables -t nat -F
  iptables -t mangle -F

  # INPUT

  # Accept anything already accepted
  iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

  # Accept anything on the loopback interface
  iptables -A INPUT -i lo -j ACCEPT

  # Drop invalid packets
  iptables -A INPUT -m state --state INVALID -j DROP

  # FORWARD

  # Allow established traffic to pass back and forth
  iptables -I FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

  # Create rules for routing packets between peer lans
  for l in "${lans[@]}"; do

    src_subnet=$(echo $l | awk -F'|' '{print $1}')
    src_itf=$(echo $l | awk -F'|' '{print $2}')

    if [[ -n $src_subnet \
      && $src_itf != $public_itf ]]; then

      # Masquerade traffic from LAN to "the world" -- done in the nat table
      iptables -t nat -I POSTROUTING -o $public_itf -s $src_subnet -j MASQUERADE

      # Allow traffic initiated from LAN to access "the world"
      iptables -I FORWARD -i $src_itf -o $public_itf -s $src_subnet -m conntrack --ctstate NEW -j ACCEPT

      for ll in "${lans[@]}"; do
        dest_subnet=$(echo $ll | awk -F'|' '{print $1}')
        dest_itf=$(echo $ll | awk -F'|' '{print $2}')

        if [[ -n $dest_subnet \
          && "$src_subnet" != "$dest_subnet" \
          && $dest_itf != $public_itf ]]; then
          
          iptables -I FORWARD -i $src_itf -o $dest_itf -s $src_subnet -d $dest_subnet -m conntrack --ctstate NEW -j ACCEPT
        fi
      done
    fi
  done

  mkdir -p /data/network/etc
  iptables-save > /data/network/etc/iptables-dump.ipt
fi

#
# Enable DHCPD
#

if [[ $config_server_enable_dhcpd == true ]]; then
  sed -i "s|INTERFACES=.*|INTERFACES=\"$dhcpd_interfaces\"|" \
    /etc/default/isc-dhcp-server

  systemctl enable isc-dhcp-server.service
  systemctl start isc-dhcp-server.service
fi

set +ex
touch /root/.network_installed
