# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "debian/stretch64"

  # Customize disk size (https://github.com/sprotheroe/vagrant-disksize)
  config.disksize.size = '15GB'

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Do not display the VirtualBox GUI when booting the machine
    vb.gui = false
  
    # Customize the amount of memory on the VM:
    vb.memory = "1024"
  end

  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
    echo 'deb http://ftp.debian.org/debian jessie-backports main' >> /etc/apt/sources.list

    apt-get update

    # Commented as this has a persistent non-interactive prompt
    #
    # DEBIAN_FRONTEND='noninteractive' \
    #   apt-get \
    #     -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' \
    #     -y dist-upgrade

    apt-get -y install \
      curl git autoconf automake dpkg-dev syslinux libz-dev zip jq \
      genisoimage qemu live-build pbuilder devscripts open-vm-tools \
      python3 python3-pystache python3-git

    apt-get autoremove -y
    apt-get clean
    apt-get autoclean

    PACKER_VERSION=1.3.3
    curl \
      -L https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip \
      -o packer.zip
    
    unzip ./packer.zip
    mv ./packer /usr/local/bin
    rm ./packer.zip
    
    OVF_TOOL_VERSION=4.3.0-7948156
    curl \
      -L https://s3.amazonaws.com/mevansam-software/vmware/VMware-ovftool-${OVF_TOOL_VERSION}-lin.x86_64.bundle \
      -o ovftool.bundle
    
    chmod +x ./ovftool.bundle
    echo -e "\n" | ./ovftool.bundle --eulas-agreed
    rm ./ovftool.bundle

    git clone https://github.com/vmware/open-vmdk
    
    pushd open-vmdk/
    make
    make install
    popd
    rm -fr open-vmdk

    git clone https://github.com/vyos/vyos-build.git
    
    cd vyos-build
    git submodule update --init --recursive
    chown -R vagrant:vagrant ./vyos-build

    ./configure
  SHELL
end
