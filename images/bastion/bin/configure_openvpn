#!/bin/bash
SCRIPT_HOME=$(cd $(dirname "$(ls -l $0 | awk '{ print $NF }')") && pwd)
source $SCRIPT_HOME/common

if [[ -z $config_openvpn_port ]]; then
    echo "Skipping VPN setup as no VPN configuration found."
    exit 0
fi

set -ex

# Use the fully qualified name
# of the host instead of host ip.
[[ $config_server_use_fqdn == "true" ]] && \
    config_server_host=$config_server_fqdn

echo "export vpn_server=\"$config_server_host\"" > /etc/openvpn/serverinfo
echo "export vpn_server_port=\"$config_openvpn_port\"" >> /etc/openvpn/serverinfo
echo "export vpn_server_proto=\"$config_openvpn_protocol\"" >> /etc/openvpn/serverinfo
echo "export vpn_server_description=\"$config_openvpn_server_description\"" >> /etc/openvpn/serverinfo
echo "export vpn_server_domain=\"$config_openvpn_server_domain\"" >> /etc/openvpn/serverinfo
echo "export vpn_server_organization=\"$config_openvpn_vpn_cert_org\"" >> /etc/openvpn/serverinfo
echo "export vpn_auth_strategy=config_openvpn_auth_strategy" >> /etc/openvpn/serverinfo

mkdir -p /etc/openvpn/easy-rsa/
pushd /etc/openvpn/easy-rsa/

cp -r /usr/share/easy-rsa/* /etc/openvpn/easy-rsa/

sed -i "s|export KEY_NAME=\".*\"|export KEY_NAME=\"${config_openvpn_vpn_cert_name:-AppBricks_VPN}\"|" vars
sed -i "s|export KEY_EMAIL=\".*\"|export KEY_EMAIL=\"${config_openvpn_vpn_cert_email:-}\"|" vars
sed -i "s|export KEY_COUNTRY=\".*\"|export KEY_COUNTRY=\"${config_openvpn_vpn_cert_country:-US}\"|" vars
sed -i "s|export KEY_PROVINCE=\".*\"|export KEY_PROVINCE=\"${config_openvpn_vpn_cert_province:-MA}\"|" vars
sed -i "s|export KEY_CITY=\".*\"|export KEY_CITY=\"${config_openvpn_vpn_cert_city:-Boston}\"|" vars
sed -i "s|export KEY_ORG=\".*\"|export KEY_ORG=\"${config_openvpn_vpn_cert_org:-AppBricks}\"|" vars
sed -i "s|export KEY_OU=\".*\"|export KEY_OU=\"${config_openvpn_vpn_cert_ou:-Development}\"|" vars

for f in $(ls build*); do sed -i "s|\-\-interact ||" $f; done

source vars
./clean-all
./build-ca
./build-key-server $hn
./build-dh

cp keys/$hn.crt keys/$hn.key keys/ca.crt keys/dh2048.pem /etc/openvpn/

cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/
gzip -f -d /etc/openvpn/server.conf.gz

openvpn --genkey --secret /etc/openvpn/ta.key

vpn_subnet_ip=${config_openvpn_subnet/\/*/}

sed -i "s/^;local a.b.c.d/local $config_server_private_ip/" /etc/openvpn/server.conf
sed -i "s/^port .*/port $config_openvpn_port/" /etc/openvpn/server.conf
sed -i "s/^proto .*/proto $config_openvpn_protocol/" /etc/openvpn/server.conf
sed -i "s/^server .*/server $vpn_subnet_ip $config_openvpn_netmask/" /etc/openvpn/server.conf
sed -i "s/^ca .*\.crt/ca ca.crt/" /etc/openvpn/server.conf
sed -i "s/^cert .*\.crt/cert $hn.crt/" /etc/openvpn/server.conf
sed -i "s/^key .*\.key/key $hn.key/" /etc/openvpn/server.conf
sed -i "s/^dh .*\.pem/dh dh2048.pem/" /etc/openvpn/server.conf
sed -i "s/^;tls-auth/tls-auth/" /etc/openvpn/server.conf
sed -i "s/^;cipher AES-128-CBC/cipher AES-256-CBC/" /etc/openvpn/server.conf
sed -i "s/^;user nobody/user nobody/" /etc/openvpn/server.conf
sed -i "s/^;group nogroup/group nogroup/" /etc/openvpn/server.conf

if [ "$config_openvpn_allow_multiple_logins" == "yes" ]; then
    sed -i "s/^;duplicate-cn/duplicate-cn/" /etc/openvpn/server.conf
fi

if [ "$config_openvpn_tunnel_all_traffic" == "yes" ]; then
    sed -i "s/^;push \"redirect-gateway def1 bypass-dhcp\"/push \"redirect-gateway def1 bypass-dhcp\"/" /etc/openvpn/server.conf
fi

if [ -n "$config_openvpn_dns_servers" ]; then
    dns_servers=$(for ip in $(echo -e "$config_openvpn_dns_servers" | sed 's/,/ /g'); do echo -n "push \\\"dhcp-option DNS $ip\\\"\\n"; done)
    sed -i "s/^;push \"dhcp-option DNS 208.67.220.220\"/;push \"dhcp-option DNS 208.67.220.220\"\n$dns_servers/" /etc/openvpn/server.conf
fi

echo -e "\n# Internal LAN" >> /etc/openvpn/server.conf
echo -e "topology subnet" >> /etc/openvpn/server.conf

# Allow established traffic to pass back and forth
iptables -I FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

itfs=( $(ip a | grep "^[0-9]*:" | awk '{ print substr($2,0,length($2)-1) }') )
i=0

for n in $(echo $config_server_lan_interfaces | sed "s/,/ /g"); do

    i=$(($i+1))
    itf=${itfs[$i]}

    netmask=$(echo $n | awk -F'|' '{print $2}')
    lan_subnet=$(echo $n | awk -F'|' '{print $3}')
    lan_netmask=$(echo $n | awk -F'|' '{print $4}')

    [[ -n $lan_netmask ]] || lan_netmask=$netmask
    lan_subnet_ip=${lan_subnet/\/*/}

    echo -e "push \"route $lan_subnet_ip $lan_netmask\"" >> /etc/openvpn/server.conf

    # Allow traffic initiated from VPN to access LAN
    iptables -I FORWARD -i tun0 -o $itf -s $config_openvpn_subnet -d $lan_subnet -m conntrack --ctstate NEW -j ACCEPT

    # Allow traffic initiated from VPN to access "the world"
    iptables -I FORWARD -i tun0 -o $itf -s $config_openvpn_subnet -m conntrack --ctstate NEW -j ACCEPT

    # Allow traffic initiated from LAN to access "the world"
    iptables -I FORWARD -i $itf -o $itf -s $lan_subnet -m conntrack --ctstate NEW -j ACCEPT

    # Masquerade traffic from VPN to "the world" -- done in the nat table
    iptables -t nat -I POSTROUTING -o $itf -s $config_openvpn_subnet -j MASQUERADE

    # Masquerade traffic from LAN to "the world"
    iptables -t nat -I POSTROUTING -o $itf -s $lan_subnet -j MASQUERADE
done

echo -e "\n# Enable PAM Authentication" >> /etc/openvpn/server.conf
echo -e "plugin /usr/lib/openvpn/openvpn-plugin-auth-pam.so openvpn" >> /etc/openvpn/server.conf

echo -e "\n# Prevent re-authorization every 3600 seconds" >> /etc/openvpn/server.conf
echo -e "reneg-sec 0" >> /etc/openvpn/server.conf

case "$config_openvpn_auth_strategy" in
    google_mfa)
        echo -e "# Enable multi-factor authentication with Google authenticator" > /etc/pam.d/openvpn
        echo -e "auth requisite pam_google_authenticator.so forward_pass" >> /etc/pam.d/openvpn
        echo -e "auth required pam_unix.so use_first_pass" >> /etc/pam.d/openvpn

        sed -i "s/# PAM configuration for the Secure Shell service/# PAM configuration for the Secure Shell service\n\nauth required \/lib\/security\/pam_google_authenticator.so/" /etc/pam.d/sshd
        sed -i "s/^ChallengeResponseAuthentication .*/ChallengeResponseAuthentication yes/" /etc/ssh/sshd_config
        ;;
    *)
        echo -e "# Enable local user authentication" > /etc/pam.d/openvpn
        echo -e "auth required pam_unix.so" >> /etc/pam.d/openvpn
        ;;
esac

popd

sed -i "s/^.*net.ipv4.ip_forward=.*/net.ipv4.ip_forward=1/" /etc/sysctl.conf
sed -i "s/^.*net.ipv6.conf.all.forwarding=.*/net.ipv6.conf.all.forwarding=1/" /etc/sysctl.conf
sysctl -p

iptables-save > /etc/openvpn/iptables-dump.ipt

cat /dev/null > /var/log/syslog
systemctl enable openvpn
systemctl start openvpn

mv $SCRIPT_HOME/create_vpn_user /usr/local/bin/create_vpn_user
chmod +x /usr/local/bin/create_vpn_user
mv $SCRIPT_HOME/delete_vpn_user /usr/local/bin/delete_vpn_user
chmod +x /usr/local/bin/delete_vpn_user

# Install Apache Web Server to host VPN configs

mkdir -p /etc/apache2/users

if [[ ! -e /etc/ssl/certs/bastion_web_ca.pem ]]; then

    openssl req -x509 -nodes -days 3650 \
        -newkey rsa:4096 -keyout /etc/ssl/private/bastion_web_key.pem \
        -out /etc/ssl/certs/bastion_web_cert.pem \
        -subj "/C=${KEY_COUNTRY}/ST=${KEY_PROVINCE}/L=${KEY_CITY}/O=${KEY_ORG}/CN=${config_openvpn_vpn_cert_cn:-vpn.appbricks.org}"

    cat << ---EOF > /etc/apache2/sites-available/vpn-web.conf
<VirtualHost *:80>
ServerName $config_server_host
Redirect permanent / https://$config_server_host/
</VirtualHost>

<VirtualHost *:443>
ServerName $config_server_host
DocumentRoot /var/www/html

SSLEngine on
SSLCertificateFile /etc/ssl/certs/bastion_web_cert.pem
SSLCertificateKeyFile /etc/ssl/private/bastion_web_key.pem

<IfModule mod_authnz_external.c>
    AddExternalAuth pwauth /usr/sbin/pwauth
    SetExternalAuthMethod pwauth pipe
</IfModule>

# VPN Users
UserDir "/home/*"
IncludeOptional "users/*.conf"

</VirtualHost>
---EOF

else

    cat << ---EOF > /etc/apache2/sites-available/vpn-web.conf
<VirtualHost *:80>
ServerName $config_server_host
Redirect permanent / https://$config_server_host/
</VirtualHost>

<VirtualHost *:443>
ServerName $config_server_host
DocumentRoot /var/www/html

SSLEngine on
SSLCertificateChainFile /etc/ssl/certs/bastion_web_ca.pem
SSLCertificateFile /etc/ssl/certs/bastion_web_cert.pem
SSLCertificateKeyFile /etc/ssl/private/bastion_web_key.pem

<IfModule mod_authnz_external.c>
    AddExternalAuth pwauth /usr/sbin/pwauth
    SetExternalAuthMethod pwauth pipe
</IfModule>

# VPN Users
UserDir "/home/*"    
IncludeOptional "users/*.conf"

</VirtualHost>
---EOF

fi

pushd /etc/apache2/mods-enabled
[[ -e userdir.load ]] || ln -s ../mods-available/userdir.load userdir.load
[[ -e authnz_external.load ]] || ln -s ../mods-available/authnz_external.load authnz_external.load
[[ -e socache_shmcb.load ]] || ln -s ../mods-available//socache_shmcb.load socache_shmcb.load
[[ -e ssl.load ]] || ln -s ../mods-available/ssl.load ssl.load
[[ -e ssl.conf ]] || ln -s ../mods-available/ssl.conf ssl.conf
popd

pushd /etc/apache2/sites-enabled
rm -f *
ln -s ../sites-available/vpn-web.conf vpn-web.conf
popd

systemctl enable apache2
systemctl start apache2

set +ex

# Create users

if [[ -n $config_openvpn_admin_passwd ]]; then

    create_vpn_user vpn_admin $config_openvpn_admin_passwd
    adduser vpn_admin sudo

    mkdir -p /home/vpn_admin/.ssh
    cp /home/ubuntu/.ssh/authorized_keys /home/vpn_admin/.ssh
    chown -R vpn_admin:vpn_admin /home/vpn_admin/.ssh

    echo -e "\nAllowUsers vpn_admin" >> /etc/ssh/sshd_config
    service sshd restart
fi

for n in $(echo $config_openvpn_users | sed "s/,/ /g"); do
    user=$(echo $n | awk -F'|' '{print $1}')
    passwd=$(echo $n | awk -F'|' '{print $2}')
    create_vpn_user $user $passwd
done

touch /root/.openvpn_installed
